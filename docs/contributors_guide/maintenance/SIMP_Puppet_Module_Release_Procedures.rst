SIMP-Owned Puppet Module Tag And Release Procedures
===================================================

This section will describe the partially-automated, release procedures
we use for SIMP-owned Puppet modules.  Specifically, it describes the
procedures to create a release for a Puppet module project in `GitHub`_
and then deploy that release to `PuppetForge`_ and `packagecloud`_. For
demonstration purposes, we will be using the ``pupmod-simp-iptables``
project, which uses the ``master`` branch as its development branch.

.. NOTE::

  You can identify whether a Puppet module is owned by SIMP, by
  examining the outer-most ``name`` entry in the module's
  ``metadata.json`` file.  The value for the ``name`` key will be
  of the form *<owner>*-*<module name>*.

Pre-Release Checklist
---------------------

The bulk of the work to release a component is to verify that the
component is ready for release.  Below is the list of verifications
that must be executed before proceeding with the release.  If any
of these steps fail, the problem identified must be fixed before
you can proceed with the tag and release steps.

#. Verify a new release is warranted and the version has been properly
   updated.

   * Clone the component repository and checkout the development
     branch to be tagged

     .. code-block:: bash

        git clone https://github.com/simp/pupmod-simp-iptables.git
        cd pupmod-simp-iptables
        git checkout master # this step isn't needed for master branch

   * Run the ``compare_latest_tag`` rake task

     .. code-block:: bash

        bundle update
        bundle exec rake compare_latest_tag

     .. IMPORTANT::

        If this check fails because no release is required, there
        is no reason to continue with the release procedures.

#. Verify the CHANGELOG information can be properly extracted by running
   the ``changelog_annotation`` rake task and examining the output.

   .. code-block:: bash

      bundle exec rake changelog_annotation

   .. IMPORTANT::

       The changelog information emitted, beginning with
       'Release of x.y.z', will be used for the `GitHub`_ release notes.
       Make sure this content exists (i.e., there are no parsing
       errors with the current version that prevents it from being
       extracted), is understandable, and is free from typos.  You
       can ignore warnings generated by CHANGELOG entries for earlier
       versions.

#. Verify the component's dependencies are correct in the
   ``metadata.json`` and ``build/rpm_metadata/requires`` files.

   * Verify there are no dependencies in the ``metadata.json`` file
     that do not exist in the ``build/rpm_metadata/requires`` and
     vice versa, except for ``puppetlabs/stdlib`` and ``simp/simplib``.

   * Verify that the version constraints for each dependency are
     the same in both files.

   .. IMPORTANT::

     The ``puppetlabs/stdlib`` and ``simp/simplib`` dependencies are
     automatically added to the compenent's RPM requires list, when the
     RPM is built.  So, these dependencies **only** have to be listed
     in the ``build/rpm_metadata/requires`` file, **if** the version(s)
     the module requires are newer than than those specified in the
     `RPM spec file template`_ .

#. Verify a PuppetForge-deployable puppet module can be created

   .. code-block:: bash

      bundle exec rake metadata_lint
      puppet module build

#. Verify RPMs can be generated for this module

   .. code-block:: bash

      bundle exec rake pkg:rpm[epel-6-x86_64]
      bundle exec rake pkg:rpm[epel-7-x86_64]

#. Verify the component's unit tests have succeeded

   * Navigate to the project's TravisCI results page and verify the
     tests for the development branch to be tagged and released have
     passed.  For our project, this page is
     https://travis-ci.org/simp/pupmod-simp-iptables/branches

     .. IMPORTANT::

        If the tests in TravisCI fail, you **must** fix them before
        proceeding.  The automated release procedures will only
        succeed, if the unit tests succeed in TravisCI.

#. Verify the component's acceptance tests have succeeded

   * Run the ``beaker:suites`` rake task with and without FIPS enabled

     .. code-block:: bash

       BEAKER_fips=yes bundle exec rake beaker:suites
       bundle exec rake beaker:suites

     .. NOTE::

        * For older projects that have not been updated to use test
          suites, you may have to run the ``acceptance`` rake task,
          instead.

        * If the GitLab instance for the project is current (it is
          sync'd every 3 hours), you can look at the latest acceptance
          test results run by GitLab.  For our project, the results will
          be at https://gitlab.com/simp/pupmod-simp-iptables/pipelines.

#. Verify this version of the component interoperates with the last full
   SIMP release. The best automated way of doing this is by running the
   ``pupmod-simp-simp`` acceptance tests.

   * Determine the version of ``pupmod-simp-simp`` used in the last SIMP
     release.  This version can be pulled from the ``Puppetfile.stable``
     file of the ``simp-core`` project tag for the last release.

   * Checkout the ``pupmod-simp-simp`` project for the last SIMP release.
     For this discussion, we will assume it is ``4.0.0``.

     .. code-block:: bash

        git clone https://github.com/simp/pupmod-simp-simp.git``
        cd pupmod-simp-simp
        git fetch -t origin
        git checkout tags/4.0.0  # can use a ref spec in lieu of a tag

   * Create a ``.fixtures.yml`` file that overlays the contents of the
     ``Puppetfile.stable`` file  of the ``simp-core`` project tag for
     the last release, with this component version and any newer
     dependencies this version itself requires.

     .. NOTE::

        Currently, there are prototype utilities to generate the
        ``.fixtures.yml`` file for you.  When these utilities are
        released,  this documentation will be (thankfully) updated.

   * Run the acceptance tests with and without FIPS mode enabled

     .. code-block:: bash

        bundle update
        BEAKER_fips-yes bundle exec rake beaker:suites
        bundle exec rake beaker:suites

#. Verify the RPM for this component can be used to upgrade the last
   full SIMP release.  For both CentOS 6 and CentOS 7, do the
   following:

   * Bring up a CentOS server that was kicked from the appropriate SIMP
     ISO and for which ``simp config`` and ``simp bootstrap`` has been
     run.

     .. NOTE::

        The `simp-packer`_ project is the easiest way to create a SIMP
        VM that has been bootstrapped.

   * Copy the component RPM generated from the above RPM verification
     step to the server and install with yum.  For example,

     .. code-block:: bash

       sudo yum install pupmod-simp-iptables-6.0.2-2016.1.noarch.rpm

     .. NOTE::

        * If the component requires updated dependencies, those RPMs will
          have to be built and installed at the same time.

        * Puppet agent runs will be tested in the R10K deploy step below.

#. Verify the RPM for this component can be used to create SIMP ISOs
   for CentoOS 6 and CentOS 7, each of which can be configured via
   ``simp config`` and bootstrapped via ``simp bootstrap``.  For
   CentOS 6 and CentOS 7:

   * Checkout the ``simp-core`` project for the last SIMP release.
     For this discussion, we will assume it is ``6.0.0-0``.

     .. code-block:: bash

        git clone https://github.com/simp/simp-core.git``
        cd simp-core
        git fetch -t origin
        git checkout tags/6.0.0-0

   * Create a ``Puppetfile.tracking`` file that contains the contents
     of ``Puppetfile.stable`` in which the URLs for the component and
     any of its updated dependencies have been updated to reference
     the versions under test.

   * Build each ISO for CentOS 6 and CentOS 7.  For example

    .. code-block:: bash

       PUPPET_VERSION="~> 4.8.2" \
       SIMP_BUILD_verbose=yes \
       SIMP_PKG_verbose=yes \
       SIMP_BUILD_distro=CentOS/7/x86 _64 \
       bundle exec rake build:auto[/net/ISO/Distribution_ISOs]

    .. IMPORTANT::
       The most reliable way to build each ISO is from a clean checkout
       of ``simp-core``.

    * Use ``simp-packer`` to verify the SIMP ISO can be bootstrapped

#. Verify the module can be installed via R10K in the test environment

   * Create a branch in the control repo for the version under test.
   * Use the module-portion of the ``Puppetfile.tracking`` from the
     ISO-build-verification step as the Puppetfile for the environment.
   * Deploy the environment using r10k.  In this example our environment
     will be ``simp_6_1_0_test``

     .. code-block:: bash

        r10k deploy environment simp_6_1_0_test -p

   * Assign nodes to the test environment using your ENC
   * Verify ``puppet agent -t`` successfully runs for each node
     assigned to the test environment.


Release to GitHub and Deploy to PuppetForge
-------------------------------------------

Finally, here comes the easy part.  Each SIMP component is configured
to automatically create a `GitHub`_ release and push the release to
`PuppetForge`_, when an annotated tag is created for the `GitHub`_
project **and** the TravisCI tests for the annotated tag push succeed.
To create the annotated tag:

#. Clone the component repository and checkout the development
   branch to be tagged

   .. code-block:: bash

      git clone git@github.com:simp/pupmod-simp-iptables.git
      cd pupmod-simp-iptables
      git checkout master # this step isn't needed for master branch

#. Generate the changelog content

   .. code-block:: bash

      bundle update
      bundle exec rake changelog_annotation > foo

#. Create the annotated tag.  In this example the content of 'foo' is::

      Release of 6.0.2

      * Wed May 24 2017 Brandon Riden <brandon.riden@onyxpoint.com> - 6.0.2-0
        - Added a workaround for Puppet 4.10 type issues
          - There was a bug in Puppet where all lookup() Hash keys were being converted
            into Strings even if they were another data type
          - This is fixed in Puppet > 4.10.2 but this patch will remain for backwards
            compatibility
        - Update puppet dependency in metadata.json
        - Remove OBE pe dependency in metadata.json


   .. code-block:: bash

      git tag -a 6.0.2 -F foo
      git push origin 6.0.2

   .. NOTE::

       For markdown-style changelogs, you will need to specify
       ``--cleanup=whitespace`` so comment headers are not stripped.

#. Verify TravisCi completes successfully

   .. IMPORTANT::
      If any of the required TravisCI builds for the project fail, for
      example due to intermittent connectivity problems with `GitHub`_,
      you can complete the release process by manually restarting the
      failed build on the Travis page for that build.

#. Verify release exists on `GitHub`_.  This release will have been
   created by ``simp-auto``.

Build Signed RPM and Deploy to packagecloud
-------------------------------------------

FILL-ME-IN.

For each component:

* Obtain the official key
* Build each signed RPM from its release tag using the official key
* Publish each signed RPM to `packagecloud`_

.. _GitHub: https://github.com
.. _PuppetForge: https://forge.puppet.com
.. _packagecloud: https://packagecloud.io/simp-project
.. _simp-project: http://simp-project.com/ISO/SIMP
.. _simp-packer: https://github.com/simp/simp-packer
.. _`RPM spec file template`: https://raw.githubusercontent.com/simp/rubygem-simp-rake-helpers/master/lib/simp/rake/helpers/assets/rpm_spec/simpdefault.spec
